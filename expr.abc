@ <stdio.hdr>
@ "expr.hdr"
@ <stdlib.hdr>
@ "string.hdr"
@ "gen.hdr"


fn createBinaryExpr(kind: ExprKind, left: ->Expr, right: ->Expr): ->Expr
{
    local n: -> Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = kind; //wird nicht geprÃ¼ft ob legal
    n->left = left;
    n->right = right;
    return n;

}


fn createIntegerExpr(val: string): ->Expr
{
    local n: -> Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_INTEGER;
    n->decimal = val;
    return n;
}

fn releaseExpr(expr: -> Expr)
{
    if (expr == nullptr) {
        return;
    }

    if (expr-> kind >= EXPR_BINARY && expr->kind <= EXPR_BINARY_END) {
        releaseExpr(expr->left);
        releaseExpr(expr->right);
    }

    free(expr);
}


fn printExprTree(expr: ->Expr)
{
    if (expr->kind == EXPR_INTEGER){
	printf("[%s]", expr->decimal);
    } else if (expr-> kind >= EXPR_BINARY && expr->kind <= EXPR_BINARY_END) {
	printf(" [ ");
	switch (expr->kind){
	    case EXPR_ADD: printf("+");break;
	    case EXPR_MUL: printf("*");break;
	    case EXPR_DIV: printf("/");break;
	    case EXPR_SUB: printf("-");break;
	    default: assert(0);
	}
	printExprTree(expr->left);
	printExprTree(expr->right);
	printf("] ");
    }
}


fn loadExpr(expr: ->Expr): GenReg
{
	if (expr-> kind >= EXPR_PRIMARY && expr->kind <= EXPR_PRIMARY_END) {
	    return genConstant(expr -> decimal);
	} else if (expr-> kind >= EXPR_BINARY && expr->kind <= EXPR_BINARY_END) {
	    local left: GenReg = loadExpr(expr -> left);
	    local right: GenReg = loadExpr(expr -> right);
	    local instr: GenInstr;
	    switch (expr -> kind){
		case EXPR_ADD: instr = GEN_ADD; break;
		case EXPR_MUL: instr = GEN_MUL; break;
		case EXPR_DIV: instr = GEN_DIV; break;
		case EXPR_SUB: instr = GEN_SUB; break;
		default: assert(0);
	    }
	    return genInstr(instr, left, right);
	}
	assert(0 && "loadExpr: not all cases handled!");
	return genConstant("0");
}

@ <stdio.hdr>
@ "lexer.hdr"
@ "parser.hdr"
@ "gen.hdr"
@ "string.hdr"

fn parseTerm(): -> Expr;
fn parseFactor(): -> Expr;

fn parseExpr(): -> Expr
{
    local left: -> Expr = parseTerm();
    if (left == nullptr){
	return nullptr;
    }
    while (token.kind == PLUS || token.kind == MINUS) {
	local tok: Token = token;
        getToken();
        local right: -> Expr = parseTerm();
        if (right == nullptr) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        if (tok.kind == PLUS){
	    left = createBinaryExpr(EXPR_ADD, left, right);
	} else if (tok.kind == MINUS){
	    left = createBinaryExpr(EXPR_SUB, left, right);
	}

    }
    return left;
}

fn parseTerm(): -> Expr
{
    local left: -> Expr = parseFactor();
    if (left == nullptr) {
        return nullptr;
    }
    while (token.kind == ASTERISK || token.kind == SLASH) {
	local tok: Token = token;
        getToken();
        local right: -> Expr = parseFactor();
        if (right == nullptr) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
	if (tok.kind == ASTERISK){
	    left = createBinaryExpr(EXPR_MUL, left, right);
	} else if (tok.kind == SLASH){
	    left = createBinaryExpr(EXPR_DIV, left, right);
	}
    }
    return left;
}

fn parseFactor(): -> Expr
{
    if (token.kind == DECIMAL_LITERAL) {
	local expr: -> Expr = createIntegerExpr(token.val);
        getToken();
        return expr;
    } else if (token.kind == LPAREN) {
        getToken();
        local expr: -> Expr = parseExpr();
        if (expr == nullptr) {
            printf("%u.%u expected expression\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        if (token.kind != RPAREN) {
            printf("%u.%u expected ')'\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        getToken();
        return expr;
    } else {
        return nullptr;
    }
}

